// Code generated by "enumer -type ClientInterface -trimprefix ClientInterface -output client_info_interface.go"; DO NOT EDIT.

package proto

import (
	"fmt"
	"strings"
)

const _ClientInterfaceName = "TCPHTTP"

var _ClientInterfaceIndex = [...]uint8{0, 3, 7}

const _ClientInterfaceLowerName = "tcphttp"

func (i ClientInterface) String() string {
	i -= 1
	if i >= ClientInterface(len(_ClientInterfaceIndex)-1) {
		return fmt.Sprintf("ClientInterface(%d)", i+1)
	}
	return _ClientInterfaceName[_ClientInterfaceIndex[i]:_ClientInterfaceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ClientInterfaceNoOp() {
	var x [1]struct{}
	_ = x[ClientInterfaceTCP-(1)]
	_ = x[ClientInterfaceHTTP-(2)]
}

var _ClientInterfaceValues = []ClientInterface{ClientInterfaceTCP, ClientInterfaceHTTP}

var _ClientInterfaceNameToValueMap = map[string]ClientInterface{
	_ClientInterfaceName[0:3]:      ClientInterfaceTCP,
	_ClientInterfaceLowerName[0:3]: ClientInterfaceTCP,
	_ClientInterfaceName[3:7]:      ClientInterfaceHTTP,
	_ClientInterfaceLowerName[3:7]: ClientInterfaceHTTP,
}

var _ClientInterfaceNames = []string{
	_ClientInterfaceName[0:3],
	_ClientInterfaceName[3:7],
}

// ClientInterfaceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ClientInterfaceString(s string) (ClientInterface, error) {
	if val, ok := _ClientInterfaceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ClientInterfaceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ClientInterface values", s)
}

// ClientInterfaceValues returns all values of the enum
func ClientInterfaceValues() []ClientInterface {
	return _ClientInterfaceValues
}

// ClientInterfaceStrings returns a slice of all String values of the enum
func ClientInterfaceStrings() []string {
	strs := make([]string, len(_ClientInterfaceNames))
	copy(strs, _ClientInterfaceNames)
	return strs
}

// IsAClientInterface returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ClientInterface) IsAClientInterface() bool {
	for _, v := range _ClientInterfaceValues {
		if i == v {
			return true
		}
	}
	return false
}
