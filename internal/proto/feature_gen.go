// Code generated by "enumer -type Feature -trimprefix Feature -output feature_gen.go"; DO NOT EDIT.

package proto

import (
	"fmt"
	"strings"
)

const _FeatureName = "ServerTimezoneQuotaKeyInClientInfoDisplayNameVersionPatchServerLogsColumnDefaultsMetadataClientWriteInfoSettingsSerializedAsStringsInterServerSecretOpenTelemetry"

var _FeatureIndex = [...]uint8{0, 14, 34, 45, 57, 67, 89, 104, 131, 148, 161}

const _FeatureLowerName = "servertimezonequotakeyinclientinfodisplaynameversionpatchserverlogscolumndefaultsmetadataclientwriteinfosettingsserializedasstringsinterserversecretopentelemetry"

func (i Feature) String() string {
	if i >= Feature(len(_FeatureIndex)-1) {
		return fmt.Sprintf("Feature(%d)", i)
	}
	return _FeatureName[_FeatureIndex[i]:_FeatureIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FeatureNoOp() {
	var x [1]struct{}
	_ = x[FeatureServerTimezone-(0)]
	_ = x[FeatureQuotaKeyInClientInfo-(1)]
	_ = x[FeatureDisplayName-(2)]
	_ = x[FeatureVersionPatch-(3)]
	_ = x[FeatureServerLogs-(4)]
	_ = x[FeatureColumnDefaultsMetadata-(5)]
	_ = x[FeatureClientWriteInfo-(6)]
	_ = x[FeatureSettingsSerializedAsStrings-(7)]
	_ = x[FeatureInterServerSecret-(8)]
	_ = x[FeatureOpenTelemetry-(9)]
}

var _FeatureValues = []Feature{FeatureServerTimezone, FeatureQuotaKeyInClientInfo, FeatureDisplayName, FeatureVersionPatch, FeatureServerLogs, FeatureColumnDefaultsMetadata, FeatureClientWriteInfo, FeatureSettingsSerializedAsStrings, FeatureInterServerSecret, FeatureOpenTelemetry}

var _FeatureNameToValueMap = map[string]Feature{
	_FeatureName[0:14]:         FeatureServerTimezone,
	_FeatureLowerName[0:14]:    FeatureServerTimezone,
	_FeatureName[14:34]:        FeatureQuotaKeyInClientInfo,
	_FeatureLowerName[14:34]:   FeatureQuotaKeyInClientInfo,
	_FeatureName[34:45]:        FeatureDisplayName,
	_FeatureLowerName[34:45]:   FeatureDisplayName,
	_FeatureName[45:57]:        FeatureVersionPatch,
	_FeatureLowerName[45:57]:   FeatureVersionPatch,
	_FeatureName[57:67]:        FeatureServerLogs,
	_FeatureLowerName[57:67]:   FeatureServerLogs,
	_FeatureName[67:89]:        FeatureColumnDefaultsMetadata,
	_FeatureLowerName[67:89]:   FeatureColumnDefaultsMetadata,
	_FeatureName[89:104]:       FeatureClientWriteInfo,
	_FeatureLowerName[89:104]:  FeatureClientWriteInfo,
	_FeatureName[104:131]:      FeatureSettingsSerializedAsStrings,
	_FeatureLowerName[104:131]: FeatureSettingsSerializedAsStrings,
	_FeatureName[131:148]:      FeatureInterServerSecret,
	_FeatureLowerName[131:148]: FeatureInterServerSecret,
	_FeatureName[148:161]:      FeatureOpenTelemetry,
	_FeatureLowerName[148:161]: FeatureOpenTelemetry,
}

var _FeatureNames = []string{
	_FeatureName[0:14],
	_FeatureName[14:34],
	_FeatureName[34:45],
	_FeatureName[45:57],
	_FeatureName[57:67],
	_FeatureName[67:89],
	_FeatureName[89:104],
	_FeatureName[104:131],
	_FeatureName[131:148],
	_FeatureName[148:161],
}

// FeatureString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FeatureString(s string) (Feature, error) {
	if val, ok := _FeatureNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FeatureNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Feature values", s)
}

// FeatureValues returns all values of the enum
func FeatureValues() []Feature {
	return _FeatureValues
}

// FeatureStrings returns a slice of all String values of the enum
func FeatureStrings() []string {
	strs := make([]string, len(_FeatureNames))
	copy(strs, _FeatureNames)
	return strs
}

// IsAFeature returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Feature) IsAFeature() bool {
	for _, v := range _FeatureValues {
		if i == v {
			return true
		}
	}
	return false
}
