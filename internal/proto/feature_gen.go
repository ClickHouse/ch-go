// Code generated by "enumer -type Feature -trimprefix Feature -output feature_gen.go"; DO NOT EDIT.

package proto

import (
	"fmt"
	"strings"
)

const _FeatureName = "TimezoneQuotaKeyInClientInfoDisplayNameVersionPatchTempTablesServerLogsColumnDefaultsMetadataClientWriteInfoSettingsSerializedAsStringsInterServerSecretOpenTelemetry"

var _FeatureIndex = [...]uint8{0, 8, 28, 39, 51, 61, 71, 93, 108, 135, 152, 165}

const _FeatureLowerName = "timezonequotakeyinclientinfodisplaynameversionpatchtemptablesserverlogscolumndefaultsmetadataclientwriteinfosettingsserializedasstringsinterserversecretopentelemetry"

func (i Feature) String() string {
	if i >= Feature(len(_FeatureIndex)-1) {
		return fmt.Sprintf("Feature(%d)", i)
	}
	return _FeatureName[_FeatureIndex[i]:_FeatureIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FeatureNoOp() {
	var x [1]struct{}
	_ = x[FeatureTimezone-(0)]
	_ = x[FeatureQuotaKeyInClientInfo-(1)]
	_ = x[FeatureDisplayName-(2)]
	_ = x[FeatureVersionPatch-(3)]
	_ = x[FeatureTempTables-(4)]
	_ = x[FeatureServerLogs-(5)]
	_ = x[FeatureColumnDefaultsMetadata-(6)]
	_ = x[FeatureClientWriteInfo-(7)]
	_ = x[FeatureSettingsSerializedAsStrings-(8)]
	_ = x[FeatureInterServerSecret-(9)]
	_ = x[FeatureOpenTelemetry-(10)]
}

var _FeatureValues = []Feature{FeatureTimezone, FeatureQuotaKeyInClientInfo, FeatureDisplayName, FeatureVersionPatch, FeatureTempTables, FeatureServerLogs, FeatureColumnDefaultsMetadata, FeatureClientWriteInfo, FeatureSettingsSerializedAsStrings, FeatureInterServerSecret, FeatureOpenTelemetry}

var _FeatureNameToValueMap = map[string]Feature{
	_FeatureName[0:8]:          FeatureTimezone,
	_FeatureLowerName[0:8]:     FeatureTimezone,
	_FeatureName[8:28]:         FeatureQuotaKeyInClientInfo,
	_FeatureLowerName[8:28]:    FeatureQuotaKeyInClientInfo,
	_FeatureName[28:39]:        FeatureDisplayName,
	_FeatureLowerName[28:39]:   FeatureDisplayName,
	_FeatureName[39:51]:        FeatureVersionPatch,
	_FeatureLowerName[39:51]:   FeatureVersionPatch,
	_FeatureName[51:61]:        FeatureTempTables,
	_FeatureLowerName[51:61]:   FeatureTempTables,
	_FeatureName[61:71]:        FeatureServerLogs,
	_FeatureLowerName[61:71]:   FeatureServerLogs,
	_FeatureName[71:93]:        FeatureColumnDefaultsMetadata,
	_FeatureLowerName[71:93]:   FeatureColumnDefaultsMetadata,
	_FeatureName[93:108]:       FeatureClientWriteInfo,
	_FeatureLowerName[93:108]:  FeatureClientWriteInfo,
	_FeatureName[108:135]:      FeatureSettingsSerializedAsStrings,
	_FeatureLowerName[108:135]: FeatureSettingsSerializedAsStrings,
	_FeatureName[135:152]:      FeatureInterServerSecret,
	_FeatureLowerName[135:152]: FeatureInterServerSecret,
	_FeatureName[152:165]:      FeatureOpenTelemetry,
	_FeatureLowerName[152:165]: FeatureOpenTelemetry,
}

var _FeatureNames = []string{
	_FeatureName[0:8],
	_FeatureName[8:28],
	_FeatureName[28:39],
	_FeatureName[39:51],
	_FeatureName[51:61],
	_FeatureName[61:71],
	_FeatureName[71:93],
	_FeatureName[93:108],
	_FeatureName[108:135],
	_FeatureName[135:152],
	_FeatureName[152:165],
}

// FeatureString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FeatureString(s string) (Feature, error) {
	if val, ok := _FeatureNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FeatureNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Feature values", s)
}

// FeatureValues returns all values of the enum
func FeatureValues() []Feature {
	return _FeatureValues
}

// FeatureStrings returns a slice of all String values of the enum
func FeatureStrings() []string {
	strs := make([]string, len(_FeatureNames))
	copy(strs, _FeatureNames)
	return strs
}

// IsAFeature returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Feature) IsAFeature() bool {
	for _, v := range _FeatureValues {
		if i == v {
			return true
		}
	}
	return false
}
