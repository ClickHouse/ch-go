// Code generated by "enumer -type Feature -trimprefix Feature -output feature_gen.go"; DO NOT EDIT.

package proto

import (
	"fmt"
	"strings"
)

const (
	_FeatureName_0      = "TempTables"
	_FeatureLowerName_0 = "temptables"
	_FeatureName_1      = "Timezone"
	_FeatureLowerName_1 = "timezone"
	_FeatureName_2      = "QuotaKeyInClientInfo"
	_FeatureLowerName_2 = "quotakeyinclientinfo"
	_FeatureName_3      = "DisplayName"
	_FeatureLowerName_3 = "displayname"
	_FeatureName_4      = "VersionPatch"
	_FeatureLowerName_4 = "versionpatch"
	_FeatureName_5      = "ServerLogs"
	_FeatureLowerName_5 = "serverlogs"
	_FeatureName_6      = "ColumnDefaultsMetadata"
	_FeatureLowerName_6 = "columndefaultsmetadata"
	_FeatureName_7      = "ClientWriteInfo"
	_FeatureLowerName_7 = "clientwriteinfo"
	_FeatureName_8      = "SettingsSerializedAsStrings"
	_FeatureLowerName_8 = "settingsserializedasstrings"
	_FeatureName_9      = "InterServerSecretOpenTelemetry"
	_FeatureLowerName_9 = "interserversecretopentelemetry"
)

var (
	_FeatureIndex_0 = [...]uint8{0, 10}
	_FeatureIndex_1 = [...]uint8{0, 8}
	_FeatureIndex_2 = [...]uint8{0, 20}
	_FeatureIndex_3 = [...]uint8{0, 11}
	_FeatureIndex_4 = [...]uint8{0, 12}
	_FeatureIndex_5 = [...]uint8{0, 10}
	_FeatureIndex_6 = [...]uint8{0, 22}
	_FeatureIndex_7 = [...]uint8{0, 15}
	_FeatureIndex_8 = [...]uint8{0, 27}
	_FeatureIndex_9 = [...]uint8{0, 17, 30}
)

func (i Feature) String() string {
	switch {
	case i == 50264:
		return _FeatureName_0
	case i == 54058:
		return _FeatureName_1
	case i == 54060:
		return _FeatureName_2
	case i == 54372:
		return _FeatureName_3
	case i == 54401:
		return _FeatureName_4
	case i == 54406:
		return _FeatureName_5
	case i == 54410:
		return _FeatureName_6
	case i == 54420:
		return _FeatureName_7
	case i == 54429:
		return _FeatureName_8
	case 54441 <= i && i <= 54442:
		i -= 54441
		return _FeatureName_9[_FeatureIndex_9[i]:_FeatureIndex_9[i+1]]
	default:
		return fmt.Sprintf("Feature(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FeatureNoOp() {
	var x [1]struct{}
	_ = x[FeatureTempTables-(50264)]
	_ = x[FeatureTimezone-(54058)]
	_ = x[FeatureQuotaKeyInClientInfo-(54060)]
	_ = x[FeatureDisplayName-(54372)]
	_ = x[FeatureVersionPatch-(54401)]
	_ = x[FeatureServerLogs-(54406)]
	_ = x[FeatureColumnDefaultsMetadata-(54410)]
	_ = x[FeatureClientWriteInfo-(54420)]
	_ = x[FeatureSettingsSerializedAsStrings-(54429)]
	_ = x[FeatureInterServerSecret-(54441)]
	_ = x[FeatureOpenTelemetry-(54442)]
}

var _FeatureValues = []Feature{FeatureTempTables, FeatureTimezone, FeatureQuotaKeyInClientInfo, FeatureDisplayName, FeatureVersionPatch, FeatureServerLogs, FeatureColumnDefaultsMetadata, FeatureClientWriteInfo, FeatureSettingsSerializedAsStrings, FeatureInterServerSecret, FeatureOpenTelemetry}

var _FeatureNameToValueMap = map[string]Feature{
	_FeatureName_0[0:10]:       FeatureTempTables,
	_FeatureLowerName_0[0:10]:  FeatureTempTables,
	_FeatureName_1[0:8]:        FeatureTimezone,
	_FeatureLowerName_1[0:8]:   FeatureTimezone,
	_FeatureName_2[0:20]:       FeatureQuotaKeyInClientInfo,
	_FeatureLowerName_2[0:20]:  FeatureQuotaKeyInClientInfo,
	_FeatureName_3[0:11]:       FeatureDisplayName,
	_FeatureLowerName_3[0:11]:  FeatureDisplayName,
	_FeatureName_4[0:12]:       FeatureVersionPatch,
	_FeatureLowerName_4[0:12]:  FeatureVersionPatch,
	_FeatureName_5[0:10]:       FeatureServerLogs,
	_FeatureLowerName_5[0:10]:  FeatureServerLogs,
	_FeatureName_6[0:22]:       FeatureColumnDefaultsMetadata,
	_FeatureLowerName_6[0:22]:  FeatureColumnDefaultsMetadata,
	_FeatureName_7[0:15]:       FeatureClientWriteInfo,
	_FeatureLowerName_7[0:15]:  FeatureClientWriteInfo,
	_FeatureName_8[0:27]:       FeatureSettingsSerializedAsStrings,
	_FeatureLowerName_8[0:27]:  FeatureSettingsSerializedAsStrings,
	_FeatureName_9[0:17]:       FeatureInterServerSecret,
	_FeatureLowerName_9[0:17]:  FeatureInterServerSecret,
	_FeatureName_9[17:30]:      FeatureOpenTelemetry,
	_FeatureLowerName_9[17:30]: FeatureOpenTelemetry,
}

var _FeatureNames = []string{
	_FeatureName_0[0:10],
	_FeatureName_1[0:8],
	_FeatureName_2[0:20],
	_FeatureName_3[0:11],
	_FeatureName_4[0:12],
	_FeatureName_5[0:10],
	_FeatureName_6[0:22],
	_FeatureName_7[0:15],
	_FeatureName_8[0:27],
	_FeatureName_9[0:17],
	_FeatureName_9[17:30],
}

// FeatureString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FeatureString(s string) (Feature, error) {
	if val, ok := _FeatureNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FeatureNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Feature values", s)
}

// FeatureValues returns all values of the enum
func FeatureValues() []Feature {
	return _FeatureValues
}

// FeatureStrings returns a slice of all String values of the enum
func FeatureStrings() []string {
	strs := make([]string, len(_FeatureNames))
	copy(strs, _FeatureNames)
	return strs
}

// IsAFeature returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Feature) IsAFeature() bool {
	for _, v := range _FeatureValues {
		if i == v {
			return true
		}
	}
	return false
}
