// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

// ColUInt128 represents UInt128 column.
type ColUInt128 []UInt128

// Compile-time assertions for ColUInt128.
var (
	_ ColInput  = ColUInt128{}
	_ ColResult = (*ColUInt128)(nil)
	_ Column    = (*ColUInt128)(nil)
)

// Type returns ColumnType of UInt128.
func (ColUInt128) Type() ColumnType {
	return ColumnTypeUInt128
}

// Rows returns count of rows in column.
func (c ColUInt128) Rows() int {
	return len(c)
}

// Row returns i-th row of column.
func (c ColUInt128) Row(i int) UInt128 {
	return c[i]
}

// Append UInt128 to column.
func (c *ColUInt128) Append(v UInt128) {
	*c = append(*c, v)
}

// AppendArr appends slice of UInt128 to column.
func (c *ColUInt128) AppendArr(v []UInt128) {
	*c = append(*c, v...)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColUInt128) Reset() {
	*c = (*c)[:0]
}

// LowCardinality returns LowCardinality for UInt128 .
func (c *ColUInt128) LowCardinality() *ColLowCardinalityOf[UInt128] {
	return &ColLowCardinalityOf[UInt128]{
		index: c,
	}
}

// Array is helper that creates Array of UInt128.
func (c *ColUInt128) Array() *ColArrOf[UInt128] {
	return &ColArrOf[UInt128]{
		Data: c,
	}
}

// NewArrUInt128 returns new Array(UInt128).
func NewArrUInt128() *ColArr {
	return &ColArr{
		Data: new(ColUInt128),
	}
}

// AppendUInt128 appends slice of UInt128 to Array(UInt128).
func (c *ColArr) AppendUInt128(data []UInt128) {
	d := c.Data.(*ColUInt128)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}
