// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColDateTime64 represents DateTime64 column.
type ColDateTime64 []DateTime64

// Compile-time assertions for ColDateTime64.
var (
	_ ColInput  = ColDateTime64{}
	_ ColResult = (*ColDateTime64)(nil)
	_ Column    = (*ColDateTime64)(nil)
)

// Type returns ColumnType of DateTime64.
func (ColDateTime64) Type() ColumnType {
	return ColumnTypeDateTime64
}

// Rows returns count of rows in column.
func (c ColDateTime64) Rows() int {
	return len(c)
}

// Row returns i-th row of column.
func (c ColDateTime64) Row(i int) DateTime64 {
	return c[i]
}

// Append DateTime64 to column.
func (c *ColDateTime64) Append(v DateTime64) {
	*c = append(*c, v)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColDateTime64) Reset() {
	*c = (*c)[:0]
}

// LowCardinality returns LowCardinality for DateTime64 .
func (c *ColDateTime64) LowCardinality() *ColLowCardinality[DateTime64] {
	return &ColLowCardinality[DateTime64]{
		index: c,
	}
}

// Array is helper that creates Array of DateTime64.
func (c *ColDateTime64) Array() *ColArr[DateTime64] {
	return &ColArr[DateTime64]{
		Data: c,
	}
}

// Nullable is helper that creates Nullable(DateTime64).
func (c *ColDateTime64) Nullable() *ColNullable[DateTime64] {
	return &ColNullable[DateTime64]{
		Values: c,
	}
}

// NewArrDateTime64 returns new Array(DateTime64).
func NewArrDateTime64() *ColArr[DateTime64] {
	return &ColArr[DateTime64]{
		Data: new(ColDateTime64),
	}
}
