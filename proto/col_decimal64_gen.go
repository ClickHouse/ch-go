// Code generated by ./cmd/ch-gen-col, DO NOT EDIT.

package proto

// ColDecimal64 represents Decimal64 column.
type ColDecimal64 []Decimal64

// Compile-time assertions for ColDecimal64.
var (
	_ ColInput  = ColDecimal64{}
	_ ColResult = (*ColDecimal64)(nil)
	_ Column    = (*ColDecimal64)(nil)
)

// Type returns ColumnType of Decimal64.
func (ColDecimal64) Type() ColumnType {
	return ColumnTypeDecimal64
}

// Rows returns count of rows in column.
func (c ColDecimal64) Rows() int {
	return len(c)
}

// Row returns i-th row of column.
func (c ColDecimal64) Row(i int) Decimal64 {
	return c[i]
}

// Append Decimal64 to column.
func (c *ColDecimal64) Append(v Decimal64) {
	*c = append(*c, v)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColDecimal64) Reset() {
	*c = (*c)[:0]
}

// LowCardinality returns LowCardinality for Decimal64 .
func (c *ColDecimal64) LowCardinality() *ColLowCardinalityOf[Decimal64] {
	return &ColLowCardinalityOf[Decimal64]{
		index: c,
	}
}

// Array is helper that creates Array of Decimal64.
func (c *ColDecimal64) Array() *ColArrOf[Decimal64] {
	return &ColArrOf[Decimal64]{
		Data: c,
	}
}

// NewArrDecimal64 returns new Array(Decimal64).
func NewArrDecimal64() *ColArrOf[Decimal64] {
	return &ColArrOf[Decimal64]{
		Data: new(ColDecimal64),
	}
}
