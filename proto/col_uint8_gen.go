// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

// ColUInt8 represents UInt8 column.
type ColUInt8 []uint8

// Compile-time assertions for ColUInt8.
var (
	_ ColInput  = ColUInt8{}
	_ ColResult = (*ColUInt8)(nil)
	_ Column    = (*ColUInt8)(nil)
)

// Type returns ColumnType of UInt8.
func (ColUInt8) Type() ColumnType {
	return ColumnTypeUInt8
}

// Rows returns count of rows in column.
func (c ColUInt8) Rows() int {
	return len(c)
}

// Row returns i-th row of column.
func (c ColUInt8) Row(i int) uint8 {
	return c[i]
}

// Append uint8 to column.
func (c *ColUInt8) Append(v uint8) {
	*c = append(*c, v)
}

// AppendArr appends slice of uint8 to column.
func (c *ColUInt8) AppendArr(v []uint8) {
	*c = append(*c, v...)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColUInt8) Reset() {
	*c = (*c)[:0]
}

// LowCardinality returns LowCardinality for UInt8 .
func (c *ColUInt8) LowCardinality() *ColLowCardinalityOf[uint8] {
	return &ColLowCardinalityOf[uint8]{
		index: c,
	}
}

// Array is helper that creates Array of uint8.
func (c *ColUInt8) Array() *ColArrOf[uint8] {
	return &ColArrOf[uint8]{
		Data: c,
	}
}

// NewArrUInt8 returns new Array(UInt8).
func NewArrUInt8() *ColArr {
	return &ColArr{
		Data: new(ColUInt8),
	}
}

// AppendUInt8 appends slice of uint8 to Array(UInt8).
func (c *ColArr) AppendUInt8(data []uint8) {
	d := c.Data.(*ColUInt8)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}
