{{- /*gotype: github.com/go-faster/ch/proto/cmd/ch-gen-col.Variant*/ -}}
// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
	"encoding/binary"
{{- if .IsFloat }}
	"math"
{{- end }}
)

var _ = binary.LittleEndian // clickHouse uses LittleEndian

// {{ .Type }} represents {{ .Name }} column.
type {{ .Type }} []{{ .ElemType }}

// Compile-time assertions for {{ .Type }}.
var (
  _ ColInput  = {{ .Type }}{}
  _ ColResult = (*{{ .Type }})(nil)
  _ Column    = (*{{ .Type }})(nil)
)

// Type returns ColumnType of {{ .Name }}.
func ({{ .Type }}) Type() ColumnType {
  return {{ .ColumnType }}
}

// Rows returns count of rows in column.
func (c {{ .Type }}) Rows() int {
  return len(c)
}

// Row returns i-th row of column.
func (c {{ .Type }}) Row(i int) {{ .ElemType }} {
  return c[i]
}

// Append {{ .ElemType }} to column.
func (c *{{ .Type }}) Append(v {{ .ElemType }})  {
  *c = append(*c, v)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *{{ .Type }}) Reset() {
  *c = (*c)[:0]
}

// NewArr{{ .Name }} returns new Array({{ .Name }}).
func NewArr{{ .Name }}() *ColArr {
  return &ColArr{
	Data: new({{ .Type }}),
  }
}

// Append{{ .Name }} appends slice of {{ .ElemType }} to Array({{ .Name }}).
func (c *ColArr) Append{{ .Name }}(data []{{ .ElemType }}) {
  d := c.Data.(*{{ .Type }})
  *d = append(*d, data...)
  c.Offsets = append(c.Offsets, uint64(len(*d)))
}

// EncodeColumn encodes {{ .Name }} rows to *Buffer.
func (c {{ .Type }}) EncodeColumn(b *Buffer) {
  {{- if .Byte }}
  b.Buf = append(b.Buf, c...)
  {{- else if .SingleByte }}
  start := len(b.Buf)
  b.Buf = append(b.Buf, make([]byte, len(c))...)
  for i := range c {
	b.Buf[i + start] = {{ .UnsignedType }}(c[i])
  }
  {{- else }}
  const size = {{ .Bits }} / 8
  offset := len(b.Buf)
  b.Buf = append(b.Buf, make([]byte, size * len(c))...)
  for _, v := range c {
	{{ .BinPut }}(
	  b.Buf[offset:offset+size],
	{{- if .IsFloat }}
	  math.{{ .Name }}bits(v),
	{{- else if .Cast }}
	  {{ .UnsignedType }}(v),
	{{- else }}
	  v,
	{{- end }}
	)
	offset += size
  }
  {{- end }}
}
