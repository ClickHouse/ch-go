{{- /*gotype: github.com/go-faster/ch/proto/cmd/ch-gen-col.Variant*/ -}}
// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
  "bytes"
  "testing"
  "io"

  "github.com/stretchr/testify/require"

  "github.com/go-faster/ch/internal/gold"
)

func Test{{ .Type }}_DecodeColumn(t *testing.T) {
  const rows = 50
  var data {{ .Type }}
  for i := 0; i < rows; i++ {
    data = append(data, {{ .New }}(i))
  }

  var buf Buffer
  data.EncodeColumn(&buf)
  t.Run("Golden", func(t *testing.T) {
    gold.Bytes(t, buf.Buf, "col_{{ .ElemLower }}")
  })
  t.Run("Ok", func(t *testing.T) {
    br := bytes.NewReader(buf.Buf)
    r := NewReader(br)

    var dec {{ .Type }}
    require.NoError(t, dec.DecodeColumn(r, rows))
    require.Equal(t, data, dec)
    require.Equal(t, rows, dec.Rows())
    dec.Reset()
    require.Equal(t, 0, dec.Rows())
    require.Equal(t, {{ .ColumnType }}, dec.Type())
  })
  t.Run("ErrUnexpectedEOF", func(t *testing.T) {
    r := NewReader(bytes.NewReader(nil))

    var dec {{ .Type }}
    require.ErrorIs(t, dec.DecodeColumn(r, rows), io.ErrUnexpectedEOF)
  })
}

func Test{{ .Type }}Array(t *testing.T) {
  const rows = 50
  data := NewArr{{ .Name }}()
  for i := 0; i < rows; i++ {
    data.Append{{ .Name }}([]{{ .ElemType }}{
      {{ .New }}(i),
      {{ .New }}(i+1),
      {{ .New }}(i+2),
    })
  }

  var buf Buffer
  data.EncodeColumn(&buf)
  t.Run("Golden", func(t *testing.T) {
    gold.Bytes(t, buf.Buf, "col_arr_{{ .ElemLower }}")
  })
  t.Run("Ok", func(t *testing.T) {
    br := bytes.NewReader(buf.Buf)
    r := NewReader(br)

    dec := NewArr{{ .Name }}()
    require.NoError(t, dec.DecodeColumn(r, rows))
    require.Equal(t, data, dec)
    require.Equal(t, rows, dec.Rows())
    dec.Reset()
    require.Equal(t, 0, dec.Rows())
    require.Equal(t, {{ .ColumnType }}.Array(), dec.Type())
  })
  t.Run("ErrUnexpectedEOF", func(t *testing.T) {
    r := NewReader(bytes.NewReader(nil))

    dec := NewArr{{ .Name }}()
    require.ErrorIs(t, dec.DecodeColumn(r, rows), io.ErrUnexpectedEOF)
  })
}

func Benchmark{{ .Type }}_DecodeColumn(b *testing.B) {
  const rows = 50_000
  var data {{ .Type }}
  for i := 0; i < rows; i++ {
    data = append(data, {{ .New }}(i))
  }

  var buf Buffer
  data.EncodeColumn(&buf)

  br := bytes.NewReader(buf.Buf)
  r := NewReader(br)

  var dec {{ .Type }}
  if err := dec.DecodeColumn(r, rows); err != nil {
    b.Fatal(err)
  }
  b.SetBytes(int64(len(buf.Buf)))
  b.ResetTimer()
  b.ReportAllocs()

  for i := 0; i < b.N; i++ {
    br.Reset(buf.Buf)
    r.raw.Reset(br)
    dec.Reset()

    if err := dec.DecodeColumn(r, rows); err != nil {
      b.Fatal(err)
    }
  }
}

func Benchmark{{ .Type }}_EncodeColumn(b *testing.B) {
  const rows = 50_000
  var data {{ .Type }}
  for i := 0; i < rows; i++ {
    data = append(data, {{ .New }}(i))
  }

  var buf Buffer
  data.EncodeColumn(&buf)

  b.SetBytes(int64(len(buf.Buf)))
  b.ResetTimer()
  b.ReportAllocs()

  for i := 0; i < b.N; i++ {
    buf.Reset()
    data.EncodeColumn(&buf)
  }
}

