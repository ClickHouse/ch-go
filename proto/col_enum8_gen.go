// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
	"github.com/go-faster/errors"
)

// ColEnum8 represents Enum8 column.
type ColEnum8 []Enum8

// Compile-time assertions for ColEnum8.
var (
	_ Input  = ColEnum8{}
	_ Result = (*ColEnum8)(nil)
	_ Column = (*ColEnum8)(nil)
)

// Type returns ColumnType of Enum8.
func (ColEnum8) Type() ColumnType {
	return ColumnTypeEnum8
}

// Rows returns count of rows in column.
func (c ColEnum8) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColEnum8) Reset() {
	*c = (*c)[:0]
}

// NewArrEnum8 returns new Array(Enum8).
func NewArrEnum8() *ColArr {
	return &ColArr{
		Data: new(ColEnum8),
	}
}

// AppendEnum8 appends slice of Enum8 to Array(Enum8).
func (c *ColArr) AppendEnum8(data []Enum8) {
	d := c.Data.(*ColEnum8)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}

// EncodeColumn encodes Enum8 rows to *Buffer.
func (c ColEnum8) EncodeColumn(b *Buffer) {
	start := len(b.Buf)
	b.Buf = append(b.Buf, make([]byte, len(c))...)
	for i := range c {
		b.Buf[i+start] = uint8(c[i])
	}
}

// DecodeColumn decodes Enum8 rows from *Reader.
func (c *ColEnum8) DecodeColumn(r *Reader, rows int) error {
	data, err := r.ReadRaw(rows)
	if err != nil {
		return errors.Wrap(err, "read")
	}
	v := *c
	v = append(v, make([]Enum8, rows)...)
	for i := range data {
		v[i] = Enum8(data[i])
	}
	*c = v
	return nil
}
