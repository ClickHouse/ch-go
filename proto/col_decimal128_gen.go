// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
	"github.com/go-faster/errors"
)

// ColDecimal128 represents Decimal128 column.
type ColDecimal128 []Decimal128

// Compile-time assertions for ColDecimal128.
var (
	_ ColInput  = ColDecimal128{}
	_ ColResult = (*ColDecimal128)(nil)
	_ Column    = (*ColDecimal128)(nil)
)

// Type returns ColumnType of Decimal128.
func (ColDecimal128) Type() ColumnType {
	return ColumnTypeDecimal128
}

// Rows returns count of rows in column.
func (c ColDecimal128) Rows() int {
	return len(c)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColDecimal128) Reset() {
	*c = (*c)[:0]
}

// NewArrDecimal128 returns new Array(Decimal128).
func NewArrDecimal128() *ColArr {
	return &ColArr{
		Data: new(ColDecimal128),
	}
}

// AppendDecimal128 appends slice of Decimal128 to Array(Decimal128).
func (c *ColArr) AppendDecimal128(data []Decimal128) {
	d := c.Data.(*ColDecimal128)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}

// EncodeColumn encodes Decimal128 rows to *Buffer.
func (c ColDecimal128) EncodeColumn(b *Buffer) {
	const size = 128 / 8
	offset := len(b.Buf)
	b.Buf = append(b.Buf, make([]byte, size*len(c))...)
	for _, v := range c {
		binPutUInt128(
			b.Buf[offset:offset+size],
			UInt128(v),
		)
		offset += size
	}
}

// DecodeColumn decodes Decimal128 rows from *Reader.
func (c *ColDecimal128) DecodeColumn(r *Reader, rows int) error {
	const size = 128 / 8
	data, err := r.ReadRaw(rows * size)
	if err != nil {
		return errors.Wrap(err, "read")
	}
	v := *c
	for i := 0; i < len(data); i += size {
		v = append(v,
			Decimal128(binUInt128(data[i:i+size])),
		)
	}
	*c = v
	return nil
}
