// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
	"encoding/binary"
)

var _ = binary.LittleEndian // clickHouse uses LittleEndian

// ColDecimal128 represents Decimal128 column.
type ColDecimal128 []Decimal128

// Compile-time assertions for ColDecimal128.
var (
	_ ColInput  = ColDecimal128{}
	_ ColResult = (*ColDecimal128)(nil)
	_ Column    = (*ColDecimal128)(nil)
)

// Type returns ColumnType of Decimal128.
func (ColDecimal128) Type() ColumnType {
	return ColumnTypeDecimal128
}

// Rows returns count of rows in column.
func (c ColDecimal128) Rows() int {
	return len(c)
}

// Row returns i-th row of column.
func (c ColDecimal128) Row(i int) Decimal128 {
	return c[i]
}

// Append Decimal128 to column.
func (c *ColDecimal128) Append(v Decimal128) {
	*c = append(*c, v)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColDecimal128) Reset() {
	*c = (*c)[:0]
}

// NewArrDecimal128 returns new Array(Decimal128).
func NewArrDecimal128() *ColArr {
	return &ColArr{
		Data: new(ColDecimal128),
	}
}

// AppendDecimal128 appends slice of Decimal128 to Array(Decimal128).
func (c *ColArr) AppendDecimal128(data []Decimal128) {
	d := c.Data.(*ColDecimal128)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}
