//go:build !amd64 || nounsafe

// Code generated by ./cmd/ch-gen-int, DO NOT EDIT.

package proto

import (
	"encoding/binary"
	"math"

	"github.com/go-faster/errors"
)

// ClickHouse uses LittleEndian.
var _ = binary.LittleEndian

// ColFloat32 represents Float32 column.
type ColFloat32 []float32

// Compile-time assertions for ColFloat32.
var (
	_ ColInput  = ColFloat32{}
	_ ColResult = (*ColFloat32)(nil)
	_ Column    = (*ColFloat32)(nil)
)

// Type returns ColumnType of Float32.
func (ColFloat32) Type() ColumnType {
	return ColumnTypeFloat32
}

// Rows returns count of rows in column.
func (c ColFloat32) Rows() int {
	return len(c)
}

// Row returns i-th row of column.
func (c ColFloat32) Row(i int) float32 {
	return c[i]
}

// Append float32 to column.
func (c *ColFloat32) Append(v float32) {
	*c = append(*c, v)
}

// Reset resets data in row, preserving capacity for efficiency.
func (c *ColFloat32) Reset() {
	*c = (*c)[:0]
}

// NewArrFloat32 returns new Array(Float32).
func NewArrFloat32() *ColArr {
	return &ColArr{
		Data: new(ColFloat32),
	}
}

// AppendFloat32 appends slice of float32 to Array(Float32).
func (c *ColArr) AppendFloat32(data []float32) {
	d := c.Data.(*ColFloat32)
	*d = append(*d, data...)
	c.Offsets = append(c.Offsets, uint64(len(*d)))
}

// EncodeColumn encodes Float32 rows to *Buffer.
func (c ColFloat32) EncodeColumn(b *Buffer) {
	const size = 32 / 8
	offset := len(b.Buf)
	b.Buf = append(b.Buf, make([]byte, size*len(c))...)
	for _, v := range c {
		binary.LittleEndian.PutUint32(
			b.Buf[offset:offset+size],
			math.Float32bits(v),
		)
		offset += size
	}
}

// DecodeColumn decodes Float32 rows from *Reader.
func (c *ColFloat32) DecodeColumn(r *Reader, rows int) error {
	if rows == 0 {
		return nil
	}
	const size = 32 / 8
	data, err := r.ReadRaw(rows * size)
	if err != nil {
		return errors.Wrap(err, "read")
	}
	v := *c
	for i := 0; i < len(data); i += size {
		v = append(v,
			math.Float32frombits(bin.Uint32(data[i:i+size])),
		)
	}
	*c = v
	return nil
}
